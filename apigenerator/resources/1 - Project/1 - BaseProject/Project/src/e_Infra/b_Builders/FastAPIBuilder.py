# System Imports
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from src.e_Infra.GlobalVariablesManager import get_global_variable
from src.b_Application.b_Service.b_Custom.BeforeRequestService import print_user_request, ApplicationException
from src.b_Application.b_Service.b_Custom.ErrorHandlerService import print_user_request_on_error, build_error_response

# Initializing FastAPI
app_handler = FastAPI(
    title="Generated API",  # Placeholder, can be configured later
    description="API generated by PythonRest (FastAPI adaptation)",
    version="0.1.0"
)

# CORS Configuration
try:
    allowed_origins = get_global_variable('origins')
    if not isinstance(allowed_origins, list): allowed_origins = ["*"]
except Exception:
    allowed_origins = ["*"]

try:
    allowed_headers = get_global_variable('headers')
    if not isinstance(allowed_headers, list): allowed_headers = ["*"]
except Exception:
    allowed_headers = ["*"]

app_handler.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=allowed_headers,
)

@app_handler.middleware("http")
async def log_request_middleware(request: Request, call_next):
    try:
        # Assuming print_user_request is adapted for FastAPI Request
        await print_user_request(request) 
    except ApplicationException as e:
        # This exception (if it leads to a response) should be handled by FastAPI's
        # main exception handling. If it's just for logging, it's fine.
        # Consider if returning e.response here is correct or if it should be reraised.
        # For now, let's assume print_user_request doesn't generate a response itself.
        print(f"ApplicationException during logging: {e}") # Log and continue
    except Exception as e:
        print(f"Error in log_request_middleware: {str(e)}")
    
    response = await call_next(request)
    return response

@app_handler.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # Assuming these service functions are adapted for FastAPI
    await print_user_request_on_error(request, exc) 
    error_response_data = await build_error_response(exc) 

    if isinstance(error_response_data, tuple) and len(error_response_data) == 2:
        content, status_code = error_response_data
    elif isinstance(error_response_data, dict):
        content = error_response_data
        status_code = 500 # Default
    else:
        content = {"detail": "Internal Server Error"}
        status_code = 500
        print(f"Unexpected format from build_error_response: {error_response_data}")
    
    return JSONResponse(status_code=status_code, content=content)

# Placeholder for any future global app configurations or middleware additions
# e.g., app_handler.add_middleware(...)
