trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonrest-cli

jobs:
- job: CheckPypiVersionBeforePublishing
  displayName: Version Check to publish or not
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
  - script: |
      # Ensure we have full commit history in the CI environment
      git fetch --all --unshallow
      
      # Find the last non-merge commit before the merge commit (PR source commit)
      last_commit_message=$(git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD))

      if [[ $last_commit_message =~ version\ ?[0-9]+\.[0-9]+\.[0-9]+ ]]; then
        extracted_version="${BASH_REMATCH[0]//version/}"
        echo "Extracted version: $extracted_version"
      else
        echo "Error: The commit message does not contain a valid version format (versionX.X.X)."
        echo "Last commit message: $last_commit_message"
        exit 1
      fi

      echo "##vso[task.setvariable variable=packageVersion;isOutput=true]$extracted_version"

      sed -i "s/version='[0-9]\+\.[0-9]\+\.[0-9]\+'$/version='$extracted_version'/" ./setup.py
      sed -i "s/pythonrest_version = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/pythonrest_version = \"$extracted_version\"/" ./pythonrest.py
      
      echo "Updated setup.py and pythonrest.py version to $extracted_version"
      
      grep "version=" ./setup.py
      grep "pythonrest_version" ./pythonrest.py
    name: VersionExtractionStep
  - script: |
      latest_version=$(curl -s https://pypi.org/pypi/$(pypi_app_name)/json | jq -r '.info.version' 2>/dev/null)
      echo "Latest version on PyPI: $latest_version"

      local_version=$(python3 setup.py --version)
      echo "Local version in setup.py: $local_version"

      if [ "$latest_version" != "$local_version" ]; then
        echo "Versions are different. Uploading to PyPI."
        pip3 install -U packaging==24.2
        pip3 install twine==6.1.0
        python3 setup.py sdist
        python3 -m twine upload dist/* --username __token__ --password $(pip_api_key)
      else
        echo "Versions are the same. Skipping PyPI upload."
      fi
    name: PypiPublishStep

  - job: CreateGitHubRelease
    displayName: 'Create GitHub Release'
    dependsOn: CheckPypiVersionBeforePublishing
    pool:
      vmImage: ubuntu-latest
    variables:
      RELEASE_VERSION: $[ dependencies.CheckPypiVersionBeforePublishing.outputs['VersionExtractionStep.packageVersion'] ]
    steps:
    - checkout: self
      persistCredentials: true
    - script: |
        echo "--- GitHub Release Script ---"
        echo "Version from previous job: $(RELEASE_VERSION)"
        
        if [ -n "$GITHUB_TOKEN" ]; then
          echo "GITHUB_TOKEN is available (length: ${#GITHUB_TOKEN})"
        else
          echo "WARNING: GITHUB_TOKEN is not available or empty"
        fi
        
        git fetch --all --unshallow
        last_commit_message=$(git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD))
        echo "Last commit message: $last_commit_message"

        REPO_FULL_NAME="$(Build.Repository.Name)" # e.g., "your-username/pythonrest"
        DYNAMIC_GITHUB_REPO_OWNER=""
        DYNAMIC_GITHUB_REPO_NAME=""

        if [[ "$(Build.Repository.Provider)" == "GitHub" && "$REPO_FULL_NAME" == */* ]]; then
          DYNAMIC_GITHUB_REPO_OWNER="${REPO_FULL_NAME%/*}"
          DYNAMIC_GITHUB_REPO_NAME="${REPO_FULL_NAME#*/}"
          echo "Dynamically determined GitHub Owner: $DYNAMIC_GITHUB_REPO_OWNER, Repo: $DYNAMIC_GITHUB_REPO_NAME"
        else
          echo "Error: Could not dynamically determine GitHub owner/repo. Provider: '$(Build.Repository.Provider)', Repo Name: '$REPO_FULL_NAME'."
          echo "Ensure pipeline is connected to a GitHub repository and checkout step ran."
          exit 1
        fi

        TAG_NAME="v$(RELEASE_VERSION)"
        RELEASE_NAME="$TAG_NAME"
        RELEASE_BODY="Release for version $(RELEASE_VERSION) generated from commit: $last_commit_message"

        IS_DRAFT="false"
        IS_PRERELEASE="false"


        if [ -z "$GITHUB_TOKEN" ]; then # Check bash environment variable for GITHUB_TOKEN
          echo "Error: GITHUB_TOKEN is not set or not available as a secret."
          exit 1
        fi
        if [ -z "$DYNAMIC_GITHUB_REPO_OWNER" ]; then # Check dynamically determined owner
          echo "Error: DYNAMIC_GITHUB_REPO_OWNER could not be determined."
          exit 1
        fi
        if [ -z "$DYNAMIC_GITHUB_REPO_NAME" ]; then # Check dynamically determined repo name
          echo "Error: DYNAMIC_GITHUB_REPO_NAME could not be determined."
          exit 1
        fi
        if [ -z "$RELEASE_VERSION" ]; then # Check bash environment variable for VERSION
          echo "Error: RELEASE_VERSION is not set (should come from previous job)."
          exit 1
        fi

        echo "Creating GitHub Release..."
        echo "Repository: ${DYNAMIC_GITHUB_REPO_OWNER}/${DYNAMIC_GITHUB_REPO_NAME}"
        echo "Tag Name: ${TAG_NAME}"
        echo "Release Name: ${RELEASE_NAME}"

        TARGET_COMMITISH=$(git rev-parse HEAD)
        echo "Target Commit: ${TARGET_COMMITISH}"

        JSON_PAYLOAD=$(cat <<EOF
        {
          "tag_name": "${TAG_NAME}",
          "target_commitish": "${TARGET_COMMITISH}",
          "name": "${RELEASE_NAME}",
          "body": "${RELEASE_BODY}",
          "draft": ${IS_DRAFT},
          "prerelease": ${IS_PRERELEASE}
        }
        EOF
        )

        echo "Payload:"
        echo "${JSON_PAYLOAD}"

        API_URL="https://api.github.com/repos/${DYNAMIC_GITHUB_REPO_OWNER}/${DYNAMIC_GITHUB_REPO_NAME}/releases"

        response=$(curl -s -w "%{http_code}" \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          -d "${JSON_PAYLOAD}" \
          "${API_URL}")

        http_code=$(tail -n1 <<< "$response")
        response_body=$(sed '$ d' <<< "$response")

        echo "GitHub API Response Code: ${http_code}"

        if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
          echo "Successfully created GitHub Release: ${RELEASE_NAME}"
          release_url=$(echo "$response_body" | grep -oP '"html_url":\s*"\K[^"]*')
          if [ -n "$release_url" ]; then
              echo "Release URL: $release_url"
          fi
        else
          echo "Error: Failed to create GitHub Release."
          echo "Response Code: ${http_code}"
          echo "Response Body (first 500 chars): $(echo "$response_body" | head -c 500)"
          if [[ "$response_body" == *"already_exists"* ]]; then
            echo "This error often indicates that the tag '${TAG_NAME}' already exists."
          fi
          exit 1
        fi
      displayName: 'Execute GitHub Release Script'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        VERSION: $(RELEASE_VERSION)

# - job: CheckChocoCLIVersion
#   displayName: 'Check Choco CLI version'
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     NEEDS_MANUAL_APPROVAL: $[eq(variables['choco_cli_version'], variables['nuspecVersion'])]
#   steps:
#   - bash: |
#       source .env

#       nuspecVersion=$(grep -m 1 '<version>' $(app_name).nuspec | sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p')
#       cliVersion="$CLI_VERSION"

#       if [ "$cliVersion" != "$nuspecVersion" ]; then
#           echo "Value for variable choco_cli_version = '$CLI_VERSION' does not match the one in .nuspec file: nuspec_version."
#           exit 1
#       fi

#       echo "The versions match. Proceeding to Manual Approval..."
#     displayName: 'Verify Choco CLI Version'

# - job: manual_approval
#   dependsOn: CheckChocoCLIVersion
#   displayName: Manual Approval
#   pool: server
#   steps:
#   - task: ManualValidation@0
#     timeoutInMinutes: 1440
#     inputs:
#       notifyUsers: ${{ parameters.USERS_EMAILS_TO_NOTIFY }}
#       instructions: "Are you sure you want to update the CLI version? A new package will be generated and will be sent to Chocolatey's approval process."
#       onTimeout: "reject"

# - job: PublishPackageToChocolatey
#   dependsOn: manual_approval
#   displayName: 'Publish Package to Chocolatey'
#   pool:
#     vmImage: 'windows-latest'
#   steps: 
#   - powershell: |
#       pip install pyinstaller
#       pyinstaller $(app_name).spec

#       $sha256Hash = Get-FileHash -Path "./dist/$(app_name).exe" -Algorithm SHA256 | Select-Object -ExpandProperty Hash
#       $md5Hash = Get-FileHash "./dist/$(app_name).exe" -Algorithm MD5 | Select-Object -ExpandProperty Hash

#       $verificationPath = "./tools/VERIFICATION.txt"
#       (Get-Content -Path $verificationPath) -replace 'MD5: .+', "MD5: $md5Hash" -replace 'SHA-256: .+', "SHA-256: $sha256Hash" | Set-Content -Path $verificationPath

#       choco pack
#       choco push $(app_name).$(choco_cli_version).nupkg -s https://chocolatey.org/ --api-key $(choco_api_key)
#     displayName: 'Continue After Manual Approval'