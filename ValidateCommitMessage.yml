trigger: none
pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'


variables:
- group: pythonrest-cli # This group likely contains pip_api_key, pypi_app_name
# GITHUB_REPO_OWNER and GITHUB_REPO_NAME will now be determined dynamically.
# These can be kept as fallbacks or for reference, but the script will prioritize dynamic values.
# - name: GITHUB_REPO_OWNER
#   value: 'your-github-username-or-org' # Fallback or reference
# - name: GITHUB_REPO_NAME
#   value: 'pythonrest' # Fallback or reference
# GITHUB_TOKEN will be a secret variable, configured in Azure DevOps UI

jobs:
- job: ExtractVersion
  displayName: '1. Extract Version & Prepare Files'
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self # Checks out the repository
    persistCredentials: true # Important for git operations if needed later, and for commit sha
  - script: |
      # Ensure we have full commit history in the CI environment
      git fetch --all --unshallow
      
      # Find the last non-merge commit before the merge commit (PR source commit)
      last_commit_message=$(git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD))

      if [[ $last_commit_message =~ version\ ?([0-9]+\.[0-9]+\.[0-9]+) ]]; then
        extracted_version="${BASH_REMATCH[1]}"
        echo "Extracted version: $extracted_version"
        # Set the output variable for this job, accessible by other jobs in the same stage
        echo "##vso[task.setvariable variable=packageVersion;isOutput=true]$extracted_version"
      else
        echo "Error: The commit message does not contain a valid version format (version X.X.X)."
        echo "Last commit message: $last_commit_message"
        exit 1
      fi
    displayName: "Check commit message format"

  - script: |
      python3 -m venv venv
      source venv/bin/activate
      pip install --upgrade pip setuptools wheel
      python setup.py sdist
    displayName: 'Validate pip package build'


