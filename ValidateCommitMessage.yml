trigger: none
pr:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest' # Changed to windows-latest

variables:
- group: pythonrest-cli

jobs:
- job: ValidateCommitMessage
  displayName: Validate commit message
  pool:
    vmImage: windows-latest # Changed to windows-latest
  steps:
  - checkout: self

  - script: |
      # Ensure we have full commit history in the CI environment
      git fetch --all --unshallow

      # Find the last non-merge commit before the merge commit (PR source commit)
      last_commit_message=$(git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD))

      if [[ $last_commit_message =~ version\ ?[0-9]+\.[0-9]+\.[0-9]+ ]]; then
        echo "Commit message contains a valid version format: $last_commit_message"
      else
        echo "Error: The commit message does not contain a valid version format (versionX.X.X)."
        echo "Last commit message: $last_commit_message"
        exit 1
      fi
    displayName: "Check commit message format"

- job: IntegrationTests
  displayName: Run Integration Tests
  dependsOn: ValidateCommitMessage
  pool:
    vmImage: windows-latest # Changed to windows-latest
  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'
    displayName: 'Use Python 3.11'

  - script: |
      python -m venv venv
      .\venv\Scripts\activate
      pip install -r requirements.txt
    displayName: 'Set up Python environment'

  - script: |
      .	ests\Databases\MySQL	est_mysql.ps1
      Remove-Item -Path "C:\Users\XeonRise\Desktop\PythonREST_Test\pythonrest\PythonRestAPI" -Recurse -Force
    displayName: 'Test MySQL'
    continueOnError: true

  - script: |
      .	ests\Databases\PostgreSQL	est_postgresql.ps1
      Remove-Item -Path "C:\Users\XeonRise\Desktop\PythonREST_Test\pythonrest\PythonRestAPI" -Recurse -Force
    displayName: 'Test PostgreSQL'
    continueOnError: true

  - script: |
      .	ests\Databases\SQLServer	est_sqlserver.ps1
      Remove-Item -Path "C:\Users\XeonRise\Desktop\PythonREST_Test\pythonrest\PythonRestAPI" -Recurse -Force
    displayName: 'Test SQL Server'
    continueOnError: true

  - script: |
      if ($? -eq $true) {
        Write-Host "Todos os testes foram executados com sucesso!"
      } else {
        Write-Error "Alguns testes falharam!"
        exit 1
      }
    displayName: 'Check test results'