trigger: none
pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonrest-cli

jobs:
- job: ValidateCommitMessage
  displayName: Validate commit message
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'
      addToPath: true
    displayName: 'Set up Python 3.11'

  - powershell: |
      git fetch --all --unshallow
      $last_commit_message = git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD)
      if ($last_commit_message -match 'version\s?[0-9]+\.[0-9]+\.[0-9]+') {
        Write-Host "Commit message contains a valid version format: $last_commit_message"
      } else {
        Write-Host "Error: The commit message does not contain a valid version format (versionX.X.X)."
        Write-Host "Last commit message: $last_commit_message"
        exit 1
      }
    displayName: "Check commit message format"

  - bash: |
      echo "Installing PowerShell Core..."
      wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
      sudo dpkg -i packages-microsoft-prod.deb
      sudo apt-get update
      sudo apt-get install -y powershell
      
      echo "Verifying installations..."
      docker --version
      docker compose --version
      python --version
      pwsh --version
      
      echo "Starting Docker service..."
      sudo systemctl start docker
      sudo systemctl enable docker
      
      echo "Waiting for Docker to be ready..."
      timeout=60
      elapsed=0
      while ! docker info >/dev/null 2>&1; do
        if [ $elapsed -ge $timeout ]; then
          echo "Docker daemon did not start within $timeout seconds."
          exit 1
        fi
        sleep 2
        elapsed=$((elapsed + 2))
        echo "Still waiting for Docker... ($elapsed s)"
      done
      
      echo "Docker is running."
    displayName: 'Install PowerShell and verify Docker'

  - bash: |
      python -m venv venv
      ./venv/bin/pip install --upgrade pip setuptools wheel
      ./venv/bin/python setup.py sdist
    displayName: 'Validate pip package build'

  - bash: |
      python -m venv venv
      ./venv/bin/pip install --upgrade pip
      ./venv/bin/pip install -r requirements.txt
      pwsh ./tests/Databases/MySQL/test_mysql.sh
      if [ -d "PythonRestAPI" ]; then rm -rf "PythonRestAPI"; fi
    displayName: 'Test MySQL DB API creation'

  - bash: |
      python -m venv venv
      ./venv/bin/pip install --upgrade pip
      ./venv/bin/pip install -r requirements.txt
      pwsh ./tests/Databases/PostgreSQL/test_postgresql.sh
      if [ -d "PythonRestAPI" ]; then rm -rf "PythonRestAPI"; fi
    displayName: 'Test PostgreSQL DB API creation'

  - bash: |
      python -m venv venv
      ./venv/bin/pip install --upgrade pip
      ./venv/bin/pip install -r requirements.txt
      pwsh ./tests/Databases/SQLServer/test_sqlserver.sh
      if [ -d "PythonRestAPI" ]; then rm -rf "PythonRestAPI"; fi
    displayName: 'Test SQL Server DB API creation'
    