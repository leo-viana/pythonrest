trigger: none
pr:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
- group: pythonrest-cli

jobs:
- job: ValidateCommitMessage
  displayName: Validate commit message
  pool:
    vmImage: windows-latest
  steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'
      addToPath: true
    displayName: 'Set up Python 3.11'

  - powershell: |
      git fetch --all --unshallow
      $last_commit_message = git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD)
      if ($last_commit_message -match 'version\s?[0-9]+\.[0-9]+\.[0-9]+') {
        Write-Host "Commit message contains a valid version format: $last_commit_message"
      } else {
        Write-Host "Error: The commit message does not contain a valid version format (versionX.X.X)."
        Write-Host "Last commit message: $last_commit_message"
        exit 1
      }
    displayName: "Check commit message format"

  - powershell: |
      Write-Host "Installing Docker Desktop..."
      choco install docker-desktop -y --force
      
      Write-Host "Adding Docker tools to PATH for all subsequent steps..."
      $dockerPath = "C:\Program Files\Docker\Docker\resources\bin"
      $newPath = "$dockerPath;" + $env:PATH
      $env:PATH = $newPath
      Write-Host "##vso[task.setvariable variable=PATH]$newPath"
      
      Write-Host "Starting Docker service and waiting for it to be ready..."
      Start-Service -Name "com.docker.service"
      $timeout = 180; $elapsed = 0
      while (-not (docker info 2>$null)) {
        if ($elapsed -ge $timeout) { throw "Docker daemon did not start within $timeout seconds." }
        Start-Sleep -Seconds 5
        $elapsed += 5
        Write-Host "Still waiting for Docker... ($elapsed s)"
      }
      
      Write-Host "Docker is running."
      python --version
      docker --version
      docker-compose --version
    displayName: 'Install and verify Python 3.11 and Docker'

  - powershell: |
      python -m venv venv
      .\venv\Scripts\pip.exe install --upgrade pip setuptools wheel
      .\venv\Scripts\python.exe setup.py sdist
    displayName: 'Validate pip package build'

  - powershell: |
      python -m venv venv
      .\venv\Scripts\pip.exe install --upgrade pip
      .\venv\Scripts\pip.exe install -r requirements.txt
      pwsh -Command "& { ./tests/Databases/MySQL/test_mysql.ps1 }"
      if (Test-Path -Path "PythonRestAPI") { Remove-Item -Recurse -Force "PythonRestAPI" }
    displayName: 'Test MySQL DB API creation'

  - powershell: |
      python -m venv venv
      .\venv\Scripts\pip.exe install --upgrade pip
      .\venv\Scripts\pip.exe install -r requirements.txt
      pwsh -Command "& { ./tests/Databases/PostgreSQL/test_postgresql.ps1 }"
      if (Test-Path -Path "PythonRestAPI") { Remove-Item -Recurse -Force "PythonRestAPI" }
    displayName: 'Test PostgreSQL DB API creation'

  - powershell: |
      python -m venv venv
      .\venv\Scripts\pip.exe install --upgrade pip
      .\venv\Scripts\pip.exe install -r requirements.txt
      pwsh -Command "& { ./tests/Databases/SQLServer/test_sqlserver.ps1 }"
      if (Test-Path -Path "PythonRestAPI") { Remove-Item -Recurse -Force "PythonRestAPI" }
    displayName: 'Test SQL Server DB API creation'
    